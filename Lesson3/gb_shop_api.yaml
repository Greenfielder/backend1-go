openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
  
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
          
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        usedId:
          $ref: '#/components/schemas/User'
        basket:
          type: array
        itemId:
          $ref: '#/components/schemas/Item'
        createdTime:
          type: string
    
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"

    
paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    post:
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      description: "Item object that needs to be added to the store"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/Item'

      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
      
  /items/upload_image:
    post:
      summary: "uploads an image"
      operationId: "uploadFile"
      description: "Additional data to pass to server"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  type: string
                fileName:
                  description: "file to upload"
                  type: string
                  format: binary
                  
      responses:
        201:
          description: "file uploaded"
      security:
      - api_key: []

  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - api_key: []
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
      - api_key: []

/order/add:

    post:
      summary: Create and add order
      operationId: AddOrder
      requestBody:
        description: "Add item to the basket"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"

      responses:
        201:
          description: successful operation
      security:
        - api_key: []

  /order/{orderId}:

    get:
      summary: Get order by ID 
      operationId: GetOrder
      parameters:
        - name: orderId
          in: path
          description: Id order that was found
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          description: Invalid ID supplied
          content: {}
    
    delete:
      summary: Deletes order with Id
      operationId: DeleteOrder
      parameters:
      - name: orderId
        in: path
        description: Order id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Order  deleted
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
      - api_key: []